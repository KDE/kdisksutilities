/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp /usr/share/dbus-1/interfaces/org.freedesktop.DeviceKit.Disks.xml -m -p OrgFreedesktopDeviceKitDisks
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORGFREEDESKTOPDEVICEKITDISKS_H_1253487406
#define ORGFREEDESKTOPDEVICEKITDISKS_H_1253487406

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.DeviceKit.Disks
 */
class OrgFreedesktopDeviceKitDisksInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DeviceKit.Disks"; }

public:
    OrgFreedesktopDeviceKitDisksInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDeviceKitDisksInterface();

    Q_PROPERTY(bool DaemonIsInhibited READ daemonIsInhibited)
    inline bool daemonIsInhibited() const
    { return qvariant_cast< bool >(internalPropGet("DaemonIsInhibited")); }

    Q_PROPERTY(QString DaemonVersion READ daemonVersion)
    inline QString daemonVersion() const
    { return qvariant_cast< QString >(internalPropGet("DaemonVersion")); }

    Q_PROPERTY(QStringList KnownFilesystems READ knownFilesystems)
    inline QStringList knownFilesystems() const
    { return qvariant_cast< QStringList >(internalPropGet("KnownFilesystems")); }

    Q_PROPERTY(bool SupportsLuksDevices READ supportsLuksDevices)
    inline bool supportsLuksDevices() const
    { return qvariant_cast< bool >(internalPropGet("SupportsLuksDevices")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> DriveInhibitAllPolling(const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(options);
        return asyncCallWithArgumentList(QLatin1String("DriveInhibitAllPolling"), argumentList);
    }

    inline QDBusPendingReply<QString> DriveSetAllSpindownTimeouts(int timeout_seconds, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(timeout_seconds) << qVariantFromValue(options);
        return asyncCallWithArgumentList(QLatin1String("DriveSetAllSpindownTimeouts"), argumentList);
    }

    inline QDBusPendingReply<> DriveUninhibitAllPolling(const QString &cookie)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(cookie);
        return asyncCallWithArgumentList(QLatin1String("DriveUninhibitAllPolling"), argumentList);
    }

    inline QDBusPendingReply<> DriveUnsetAllSpindownTimeouts(const QString &cookie)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(cookie);
        return asyncCallWithArgumentList(QLatin1String("DriveUnsetAllSpindownTimeouts"), argumentList);
    }

    inline QDBusPendingReply<QStringList> EnumerateDeviceFiles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumerateDeviceFiles"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > EnumerateDevices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumerateDevices"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindDeviceByDeviceFile(const QString &device_file)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(device_file);
        return asyncCallWithArgumentList(QLatin1String("FindDeviceByDeviceFile"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindDeviceByMajorMinor(qlonglong device_major, qlonglong device_minor)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(device_major) << qVariantFromValue(device_minor);
        return asyncCallWithArgumentList(QLatin1String("FindDeviceByMajorMinor"), argumentList);
    }

    inline QDBusPendingReply<QString> Inhibit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Inhibit"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> LinuxMdCreate(const QList<QDBusObjectPath> &components, const QString &level, qulonglong stripe_size, const QString &name, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(components) << qVariantFromValue(level) << qVariantFromValue(stripe_size) << qVariantFromValue(name) << qVariantFromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxMdCreate"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> LinuxMdStart(const QList<QDBusObjectPath> &components, const QStringList &options)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(components) << qVariantFromValue(options);
        return asyncCallWithArgumentList(QLatin1String("LinuxMdStart"), argumentList);
    }

    inline QDBusPendingReply<> Uninhibit(const QString &cookie)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(cookie);
        return asyncCallWithArgumentList(QLatin1String("Uninhibit"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DeviceAdded(const QDBusObjectPath &device);
    void DeviceChanged(const QDBusObjectPath &device);
    void DeviceJobChanged(const QDBusObjectPath &device, bool jobinprogress, bool jobiscancellable, const QString &jobid, int jobnumtasks, int jobcurtask, const QString &jobcurtaskid, double jobcurtaskpercentage);
    void DeviceRemoved(const QDBusObjectPath &device);
};

namespace org {
  namespace freedesktop {
    namespace DeviceKit {
      typedef ::OrgFreedesktopDeviceKitDisksInterface Disks;
    }
  }
}
#endif
